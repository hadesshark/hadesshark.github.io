[{"title":"學習 ssh 相關知識","date":"2017-06-19T15:34:36.000Z","path":"2017/06/19/學習-ssh-相關知識/","text":"今天 travis ci 連接 github 終於成功了！測試用 ssh 和 github api token 最後用 token 方法才成功，以下是配置過程：（一）github 新增 Persional access tokens （二）在電腦上用 travis 12345gem install rubygem install travistravis login# traivs_token 用 github 設定的名稱， &lt;token&gt; 用後來產生的明碼travis encrypt 'travis_token=&lt;token&gt;' --add 上面輸入完後，會在 .travis.yml 增加： 123env: global: secure: xxxxxxxxxx （三）設定 .travis.yml 1234567891011121314language: node_jsnode_js: stablescript:- npm install- hexo clafter_success:- git config --global user.name \"hadesshark\"- git config --global user.email \"hades_shark@hotmal.com\"# sed 這一段話很重要- sed -i'' \"/^ *repo/s~github\\.com~$&#123;travis_token&#125;@github.com~\" _config.yml- hexo deploy -genv: global: secure: XXXXXXXXXXXXXX 另外比較重要的設定就是 _config.yml ： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git branch: master 關於 sed -i&#39;&#39; &quot;/^ *repo/s~github\\.com~${travis_token}@github.com~&quot; 中有兩點很重要： （一）travis_token 這個名稱要用 github 的名稱 （二）.travis.yml 和 _config.yml 要用上面的設定","tags":[{"name":"hexo","slug":"hexo","permalink":"https://hadesshark.github.io/tags/hexo/"},{"name":"travis ci","slug":"travis-ci","permalink":"https://hadesshark.github.io/tags/travis-ci/"},{"name":"CI","slug":"CI","permalink":"https://hadesshark.github.io/tags/CI/"}]},{"title":"關於 hexo deploy 問題","date":"2017-06-18T18:52:13.000Z","path":"2017/06/18/關於-hexo-deploy-問題/","text":"目前遇到的問題就是無法用 travis ci 上傳 github 這個部份，依照不用 ci 的步驟應該是：（一）hexo clear（二）hexo g（三）hexo d（四）git commit … 在 hexo d 時 travis ci 還是無法成功上傳。","tags":[{"name":"hexo","slug":"hexo","permalink":"https://hadesshark.github.io/tags/hexo/"},{"name":"travis ci","slug":"travis-ci","permalink":"https://hadesshark.github.io/tags/travis-ci/"},{"name":"git","slug":"git","permalink":"https://hadesshark.github.io/tags/git/"}]},{"title":"關於 CI 的一些小小心得","date":"2017-06-18T15:09:44.000Z","path":"2017/06/18/關於-CI-的一些小小心得/","text":"這一篇是關於 python 專案 ci 設定問題。最開始是從《Python 項目開發實戰》中關於 Jenkins 設定開始的。在第十章中知道可以輸出報告和顯示覆蓋率報告，但我僅想了解最後的結果，簡單來說就是在 github README.md 中顯示目前專案情況，而且不想透過本機上的 jenkins ，所以改用 travis ci 和 coveralls 。 travis ci 的部份比較簡單，在 .travis.xml 中寫上設定，如下： 1234567891011language: pythonpython: - \"3.6\"# command to install dependenciesinstall: - pip install -r requirements.txt# command to run testsscript: - py.test --cov=foo --cov-report=xmlafter_success: - coveralls 專案是使用 virtualenv -p python3 ，從中可以看出 pip 要安裝 pytest 、 pytest-cov 、python-coveralls ，最後要用 pip freeze &gt; ./requirements.txt 就可以讓專案比較乾淨。 coveralls 我測試一段時間，才出現覆蓋率數值。在 README.rd 中只要寫下： 12[![Build Status](https://travis-ci.org/hadesshark/jenkins_test_python.svg?branch=master)](https://travis-ci.org/hadesshark/jenkins_test_python)[![Coverage Status](https://coveralls.io/repos/github/hadesshark/jenkins_test_python/badge.svg?branch=master)](https://coveralls.io/github/hadesshark/jenkins_test_python?branch=master) 在 coveralls 和 travis ci 中的專案中有 markdown 格式可以只接下載，所以整個過程很好設定。 整個專案的過程是先 git push commit 之後再 travis ci build 最後 coveralls coverage。 我比較好奇的是如何讓 coveralls 有 coverage 這個部份，因為在設定中僅是在 after_success 寫下 coveralls 這個設定後就產生覆蓋率，不像 coverage.py 一樣還要 coverage run … 所以感覺很奇怪。","tags":[{"name":"travis ci","slug":"travis-ci","permalink":"https://hadesshark.github.io/tags/travis-ci/"},{"name":"CI","slug":"CI","permalink":"https://hadesshark.github.io/tags/CI/"},{"name":"Jenkins","slug":"Jenkins","permalink":"https://hadesshark.github.io/tags/Jenkins/"},{"name":"coveralls","slug":"coveralls","permalink":"https://hadesshark.github.io/tags/coveralls/"},{"name":"python","slug":"python","permalink":"https://hadesshark.github.io/tags/python/"}]},{"title":"最近在測試網路分享的讀書方法","date":"2017-04-07T22:01:21.000Z","path":"2017/04/07/最近在測試網路分享的讀書方法/","text":"網路上提供的讀書方法昨天和前天測試了一下，還算可以（第一次測試時，感覺沒讀到書），如果有新的想法會再打進來的XD","tags":[]},{"title":"D3.js 學習心得","date":"2017-03-30T18:42:30.000Z","path":"2017/03/30/D3-js-學習心得/","text":"今天想說用 Go.js 寫視覺化，但卻有水印。雖然 D3.js 沒辦法在文章中寫入，但寫成普通網頁卻很簡單，而且文章也很多，所以就用 D3.js 。 123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;script type=\"text/javascript\" src=\"https://d3js.org/d3.v4.min.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;script&gt; var dataset = [5, 10, 15, 20, 25]; d3.select(\"body\").selectAll(\"p\") .data(dataset) .enter() .append(\"p\") .text(function(d) &#123; return d;&#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 截圖有點不方便（還要調整大小，而且要用 html 標籤）。 重點回歸繪圖： 12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;script type=\"text/javascript\" src=\"https://d3js.org/d3.v4.min.js\"&gt;&lt;/script&gt; &lt;style&gt; div.bar &#123; display: inline-block; width: 20px; height: 75px; background-color: teal; margin-right: 2px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;script&gt; var dataset = [5, 10, 15, 20, 25]; d3.select(\"body\").selectAll(\"div\") .data(dataset) .enter() .append(\"div\") .attr(\"class\", \"bar\") .style(\"height\", function(d) &#123; var barHeight = d * 5; return barHeight + \"px\"; &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;script type=\"text/javascript\" src=\"d3.min.js\"&gt;&lt;/script&gt; &lt;style&gt; div.bar &#123; display: inline-block; width: 20px; height: 75px; background-color: teal; margin-right: 2px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;script&gt; var dataset = [5, 10, 13, 19, 21, 25, 22, 18, 15, 13, 11, 12, 15, 20, 18, 17, 16, 18, 23, 25]; var w = 500; var h = 100; var barPadding = 1; var svg = d3.select(\"body\") .append(\"svg\") .attr(\"width\", w) .attr(\"height\", h); svg.selectAll(\"rect\") .data(dataset) .enter() .append(\"rect\") .attr(\"x\", function(d, i) &#123; return i * (w / dataset.length); &#125;) .attr(\"height\", function(d) &#123; return d * 4; &#125;) .attr(\"y\", function(d) &#123; return h - d * 4; &#125;) .attr(\"width\", w / dataset.length - barPadding) .attr(\"fill\", function(d) &#123; return \"rgb(0, 0, \" + (d * 10) + \")\"; &#125;); svg.selectAll(\"text\") .data(dataset) .enter() .append(\"text\") .text(function(d) &#123; return d; &#125;) .attr(\"x\", function(d, i) &#123; return i * (w / dataset.length) + (w / dataset.length - barPadding) / 2; &#125;) .attr(\"y\", function(d) &#123; return h - (d * 4) + 14; &#125;) .attr(\"font-family\", \"sans-serif\") .attr(\"font-size\", \"11px\") .attr(\"fill\", \"white\") .attr(\"text-anchor\", \"middle\"); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 原圖有壓縮。 目前有遇到版本問題， v3 和 v4 有些指令不能相容。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;script type=\"text/javascript\" src=\"d3.min.js\"&gt;&lt;/script&gt; &lt;style&gt; .axis path, .axis line &#123; fill: none; stroke: black; shape-rendering: crispEdges; &#125; .axis text &#123; font-family: sans-serif; font-size: 11px; &#125; p &#123; color: olive; &#125; text &#123; fill: olive; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;script&gt; var dataset = [ [5, 20], [480, 90], [250, 50], [100, 33], [330, 95], [410, 12], [475, 44], [25, 67], [85, 21], [220, 88], [600, 150] ]; var w = 500; var h = 300; var padding = 30; var xScale = d3.scaleLinear() // v3 scale.linear() .domain([0, d3.max(dataset, function(d) &#123; return d[0]; &#125;)]) .range([padding, w - padding * 2]) .nice(); var yScale = d3.scaleLinear() // 同上 .domain([0, d3.max(dataset, function(d) &#123; return d[1]; &#125;)]) .range([h - padding, padding]) .nice(); var rScale = d3.scaleLinear() // 同上 .domain([0, d3.max(dataset, function(d) &#123; return d[1]; &#125;)]) .range([2, 5]) .nice(); var xAxis = d3.axisBottom() // d3.svg.axis().orient(\"bottom\") .scale(xScale) .ticks(5); var yAxis = d3.axisLeft() // 和上面類似 .scale(yScale) .ticks(5); var svg = d3.select(\"body\") .append(\"svg\") .attr(\"width\", w) .attr(\"height\", h); svg.selectAll(\"circle\") .data(dataset) .enter() .append(\"circle\") .attr(\"cx\", function(d) &#123; return xScale(d[0]); &#125;) .attr(\"cy\", function(d) &#123; return yScale(d[1]); &#125;) .attr(\"r\", function(d) &#123; return rScale(d[1]); &#125;); svg.selectAll(\"text\") .data(dataset) .enter() .append(\"text\") .text(function(d) &#123; return d[0] + \",\" + d[1]; &#125;) .attr(\"x\", function(d) &#123; return xScale(d[0]); &#125;) .attr(\"y\", function(d) &#123; return yScale(d[1]); &#125;) .attr(\"font-family\", \"sans-serif\") .attr(\"font-size\", \"11px\") .attr(\"fill\", \"red\") svg.append(\"g\") .attr(\"class\", \"axis\") .attr(\"transform\", \"translate(0,\" + (h - padding) + \")\") .call(xAxis); svg.append(\"g\") .attr(\"class\", \"axis\") .attr(\"transform\", \"translate(\" + padding + \", 0) \") .call(yAxis); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 這個算是很常見的圖片，程式有點長， v3 和 v4 的不同，需要修改一下。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;script type=\"text/javascript\" src=\"d3.min.js\"&gt;&lt;/script&gt; &lt;style&gt; rect:hover &#123; fill: orange; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;Chick on this text to update the chart with new data values (once).&lt;/p&gt; &lt;script&gt; //Width and height var w = 600; var h = 250; var dataset = [ 5, 10, 13, 19, 21, 25, 22, 18, 15, 13, 11, 12, 15, 20, 18, 17, 16, 18, 23, 25 ]; var xScale = d3.scaleBand() .domain(d3.range(dataset.length)) .rangeRound([0, w]) .padding(0.05); var yScale = d3.scaleLinear() .domain([0, d3.max(dataset)]) .range([0, h]); //Create SVG element var svg = d3.select(\"body\") .append(\"svg\") .attr(\"width\", w) .attr(\"height\", h); svg.selectAll(\"rect\") .data(dataset) .enter() .append(\"rect\") .attr(\"x\", function(d, i) &#123; return xScale(i); &#125;) .attr(\"y\", function(d) &#123; return h - yScale(d); &#125;) .attr(\"width\", xScale.bandwidth()) .attr(\"height\", function(d) &#123; return yScale(d); &#125;) .attr(\"fill\", function(d) &#123; return \"rgb(0, 0, \" + (d * 10) + \")\"; &#125;) .on(\"mouseover\", function(d) &#123; var xPosition = parseFloat(d3.select(this).attr(\"x\")) + xScale.bandwidth() / 2; var yPosition = parseFloat(d3.select(this).attr(\"y\")) + 14; svg.append(\"text\") .attr(\"id\", \"tooltip\") .attr(\"x\", xPosition) .attr(\"y\", yPosition) .attr(\"text-anchor\", \"middle\") .attr(\"font-family\", \"sans-serif\") .attr(\"font-size\", \"11px\") .attr(\"font-weight\", \"bold\") .attr(\"fill\", \"black\") .text(d); &#125;) .on(\"mouseout\", function () &#123; d3.select(\"#tooltip\").remove(); &#125;) .on(\"click\", function() &#123; // 點完數字應該不在原地 d3.select(\"#tooltip\").remove(); sortBars(); &#125;) .append(\"title\") .text(function(d) &#123; return \"This value is \" + d; &#125;); var sortOrder = false; var sortBars = function() &#123; sortOrder = !sortOrder; svg.selectAll(\"rect\") .sort(function(a, b) &#123; if (sortOrder) &#123; return d3.ascending(a, b); &#125; else &#123; return d3.descending(a, b); &#125; &#125;) .transition() .delay(function(d, i) &#123; return i * 50; &#125;) .duration(1000) .attr(\"x\", function(d, i) &#123; return xScale(i); &#125;); &#125;; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 這一個又是一個直線圖，有多幾個功能： 排序 正排序 負排序 文字提示 顏色提示 截圖有困難，所以就不附圖了。","tags":[{"name":"d3.js","slug":"d3-js","permalink":"https://hadesshark.github.io/tags/d3-js/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://hadesshark.github.io/tags/JavaScript/"}]},{"title":"javascript 學習","date":"2017-03-22T19:51:16.000Z","path":"2017/03/22/javascript-學習/","text":"這一篇文章主要是看 廖雪峰 - JavaScript教程 的心得，文章結構會用其章篇照順序來寫。 JavaScirpt 簡介簡單來說就是 ECMAScript == JavaScript ，而 JavaScript 因為當初設計的時間因素，產生設計缺陷。 快速入門這一篇說明要如何使用 JavaScript 和怎麼編寫，瀏覽器也能編寫 JavaScript 。 我認為最好的方法還是安裝 Node.js 。 基本語法有二個重點要注意： 語句結尾要加 ; ，語句塊用 {…}。 注意大小寫。 數據類型和變量對 Number 做比較時，相等運算符 == ，有兩種比較運算符： == 自動轉換數據類型再比較（比較怪異） === 不會轉換數據類型，數據類型不一致返回 false ，如果一致，再比較。 所以說用 === 比較好。 NaN 與其他值都不相等，包括它自己。唯一能判斷 NaN 的方法是 isNaN() 函數。 另外，浮點數相等比較，由於設計缺陷，過程中會產生誤差。 null 表示空值，和 0 以及空字符串 &#39;&#39; 不同， null 就是空。 undefined 表未定義，通常用來判斷函數參數是否傳遞下有用。 如果變量沒有通過 var 申明就被使用，該變量就自動被申明為全局變量。為了修補這一缺陷， ECMA 推出了 strict 模式，未使用 var 申明變量就使用，將導致運行錯誤。 1'use strict'; 數據類型這一章，把重點再整理如下： 變數使用 var 申明。 相等比較請用 === ，浮點數不要用相等比較。 null 為空， undefined 表未定義。 字符串多行字符串 123`這是一個多行字符串`; 上面行最新的 ES6 新增的一種多行字符串表示方法。 字符串是不可變的，如果對字符串的某個索引賦值，不會有任何錯誤，也沒有任何效果。 這一章重要的就兩點： 多行字符串 字符串不可變 數組Array 可變，越界訪問索引不會報錯，但不建議直接修改其大小。 join 它把當前 Array 每個元素都用指定字符串連接起來，返回連接後的字符串。 12var arr = ['A', 'B', 'C', 1, 2, 3];arr.join('-'); // 'A-B-C-1-2-3' 如果 Array 的元素不是字符串，將自動轉換為字符串後再連接。 數組由於可變，所以有很多增加、刪除、插入的方法來調用。 對象（物件）12345678var xiaoming = &#123; name: '小明', birth: 1990, school: 'No.1 Middle School', height: 1.70, weight: 65, score: null&#125;; 上面有幾點要注意： 用 {...} 表示對象（物件），其後要加 ; 最後一個鍵值不需要在未尾加 , 屬性名必須是一個有效的變量名，如果不是請用 &#39;&#39; 括起來 最後一點，在 JavaScript 使用上不能用 xiaoming.屬性; ，只能用 xiaoming[&#39;屬性&#39;]; 。 這一章還沒寫到繼承，算是簡單介紹物件架構。 條件判斷 主要就是 if else 。 循環 除了 for in 比較特別外，其他 for 、 while ，其他語言都有。 Map 和 SetMap 是一組鍵值對的結構，具快速查找地速度。 Set 和 Map 類似，但其 key 的集合不能重複。 比較少用的數據類型。 iterable12345'use strict';var a = [1, 2, 3];for (var x of a) &#123; alert(x);&#125; 就是指 array 、 map 、 set ，都屬於 iterable 類型。 這裡有講到 for in 、 for of ，和 forEach 方法： for ... in 由於歷史遺留問題，是對物件屬性遍歷。一個 array 實際上是一個物件，它的每個元素的索引被視為一個屬性。 更好的方式是使用 forEach ，它接收一個函數，每次迭代就自動回調該函數。 1234var a = ['A', 'B', 'C'];a.forEach(function (element) &#123; alert(element);&#125;) 對函數式寫法怎麼看都覺得很怪。 函數JavaScript 的函數可以像變量一樣使用，具有非常強大的抽象能力。 新的大章節，對函數的介紹。 函數定義和調用定義函數1234567function abs(x) &#123; if (x &gt;= 0) &#123; return x; &#125; else &#123; return -x; &#125;&#125; 如果沒有 return ，函數執行完會返回 undefined 。 由於 JavaScript 函數也是物件，上述定義的 abs() 函數實際上是一個函數物件，而函數名 abs 可以視為指向該函數的變量。因此，第二種定義函數的方式如下： 1234567var abs = function (x) &#123; if (x &gt;= 0) &#123; return x; &#125; else &#123; return -x; &#125;&#125;; // ; 很重要 上述為一個匿名函數，它沒有函數名。但是，這個匿名函賦值給了變量 abs ，所以，通過變量 abs 就可以調用該函數。 JavaScript 允許傳入任意個參數而不影響調用。 arguments 一個函數內部起作用，而永遠指向函數傳入的所有參數。 這章中 functional language 的原故，會覺得匿名函數很醜，所以要先了解後，再回來看才比較了解內容。 變量作用域JavaScript 默認有一個全局對象 window ，全局作用域的變量實際上被綁定到 window 的一個屬性。 ES6 引入 let 替代 var 申明一個塊級作用域的變量。 過去通常用全部大寫的變量來表示常量，但 ES6 引入 const 來定義常量。 這一章，要注意的就是函數裡的變量作用域問題，其他部份就和其它語言一樣。 方法在物件中綁定函數（稱為方法）： 1234567891011121314var xiaoming = &#123; name: '小明', birth: 1990, age: function () &#123; var y = new Date().getFullYear(); return y - this.birth; &#125;&#125;;xiaoming.age;xiaoming.age();age(); // NaNvar fn = xiaoming.age;fn(); // NaN 上面中最重要的就是 this 這個變量，它始終指向當前對象。 我個人認為是指向調用當前對象。 比較好的方法是先把它給其其變數： 12345678910111213141516'use strict';var xiaoming = &#123; name: '小明', birth: 1990, age: function () &#123; var that = this; function getAgeFromBirth() &#123; var y = new Date().getFullYear(); return y - that.birth; &#125; return getAgeFromBirth(); &#125;&#125;;xiaoming.age(); 另外就是 apply ： 12345678910111213function getAge() &#123; var y = new Date().getFullYear(); return y - this.birth;&#125;var xiaoming = &#123; name: '小明', birth: 1990, age: getAge&#125;;xiaoming.age();getAge.apple(xiaoming, []); 還有就是 call()。 這一章不知道在講什麼，對新手最不友善的一章。 高階函數JavaScript 函數都指向某個變量。即然變量可以指向函數，函數的參數能接收變量，那麼一個函數就可以收另一個函數作為參數。 也就是函數的本質。（wik 上有） 12345function add(x, y, f) &#123; return f(x) + f(y);&#125;add(-5, 6, Math.abs); 簡單來說就是讓函數越來越直覺可寫。 map / reduce12345function pow(x) &#123; return x * x;&#125;var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];arr.map(pow); 123456789var f = function (x) &#123; return x * x;&#125;;var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];var result = [];for (var i = 0; i &lt; arr.length; i++) &#123; result.push(f(arr[i]));&#125; 照我上一章所講的，高階函數更加直覺，而且把運算規則抽象化了。 1234var arr = [1, 3, 5, 7, 9];arr.reduce(function (x, y) &#123; return x + y;&#125;); // 25 求積的練習題參考答案： 1234567'use strict';function product(arr) &#123; return arr.reduce(function (x, y) &#123; return x * y; &#125;);&#125; 算是很方便的函數。 python 雖然也有一樣的函數，感覺沒有那麼好用（直觀）。 下面是 python 的寫法： 1234a = [1, 2, 3, 4, 5, 6, 7, 8, 9];def fn(x): return x * x[item for item in map(fn, a)] # [1, 4, 9, 16, 25, 36, 49, 64, 81] filter12345var arr = [1, 2, 4, 5, 6, 9, 10, 15];var r = arr.filter(function (x) &#123; return x % 2 !== 0;&#125;);r; // [1, 5, 9, 15] 也是很方便的函數。 sort 一個不能亂用的函數。","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://hadesshark.github.io/tags/JavaScript/"}]},{"title":"筆電架心得","date":"2017-03-14T19:19:33.000Z","path":"2017/03/14/筆電架心得/","text":"開箱三月十號買的筆電架在中午左右終於送到了，真的超重的XDDD買的是 ErgoMap人因地圖 的 漂浮式 桌用人體工學筆電架 如下圖： 上面這一盒是支架（這一盒因為有底座所以最重），但不加上筆電托盤部份。 這一盒就是托盤，打開如下： 最底下就是托盤，打開盒子說明書就在眼前XDD 整面都是英文（還好零件少） 這裡有幾點要先注意： 筆電先放在托盤上，確定哪一個位置放 A 零件上去時不會擋到筆電插口。 托盤最下面有兩個塑膠墊先確任是否牢固，我的塑膠墊右邊沒放好掉出來 XDD 由於托盤下面是金屬，所以請小心輕放。 另外一個就是支架說明書： 看圖， A 零件就是盒子內最重的底座， E 零件是下端支撐臂，在安裝時不知道為什麼掉出了下圖零件： 在鎖下支撐臂到底座時因為鬆鬆搖來搖去，才知道要放在說明書 2 步驟中的 B 零件下方。 其他部分就照著說明書安裝就可以了，但在安裝筆電托盤時也有幾點要注意： 當托盤放在支架時，如果托盤在「低頭」請不要緊張，把下圖看到的六角螺絲順時鐘鎖緊（記得把托盤調到要的高度），而且要鎖很緊才行，要不然筆電放上去托盤和筆電又要低頭了XDD 托盤和支架連接的部份用扣榫就可以了，我開箱時找螺絲找老半天，原來沒有附XDD 最後放上安裝前和安裝後的照片： 上面是安裝前，我覺得筆電離我超遠的，每次都彎腰駝背的。 上面這一張圖就可以看到筆電的位置比較高了，而且可以拉到更前面。 上面是側面照。 結語當初買支架是因為想換一個大螢幕外接來寫程式，在網路上找到 ErgoMap人因地圖 的 漂浮式 桌用人體工學筆電架 ，就花錢買了（想說可以換接螢幕），目前還算 ok ，可能之後會換接螢幕XDD","tags":[]},{"title":"今天看 CI 和 DevOps 的心得","date":"2017-03-13T19:20:23.000Z","path":"2017/03/13/今天看-CI-和-DevOps-的心得/","text":"回歸程式設計的最開端順序分別是： 準備環境 寫程式 佈置程式（設定到指定位置） 測試程式 驗證結果 除錯 如果分工的話 1、3 是維運， 2、6 是開發， 4、5 是測試人員，對於程式目標有兩點： 時間 品質 CI 的本質就是「持續修改程式並驗證程式是否正確」，DevOps 就是（Development Operations），簡單來說就是開發和維運之間溝通的文化。 先要對，才會有再求好。","tags":[{"name":"CI","slug":"CI","permalink":"https://hadesshark.github.io/tags/CI/"},{"name":"DevOps","slug":"DevOps","permalink":"https://hadesshark.github.io/tags/DevOps/"}]},{"title":"整理房間","date":"2017-03-12T15:13:06.000Z","path":"2017/03/12/整理房間/","text":"房間的整理，就像寫程式一樣，需要「重構」。相同性質歸在一起，重複地就重構（或者刪去），但是對於書籍是否要丟就很難取捨，很多書雖然看完，但是總是不想丟掉，更不用說沒看和根本還沒看的。 目前最大的問題就是看完書後，什麼感覺都沒有留下來、知識更不用講了。雖然很多書，都有說要做筆記，但有些書做完筆記也沒有說真的有留下什麼。我想可能是沒有教自己的關係，所以最近我會以 shell 的書當作實驗。 目前的計畫是： 先閱讀，把重點和測試過會錯的部份記錄下來 整本閱讀完，以自己的了解方式寫 30 天系列（或者 7 系列） 房間整理也是一樣，可以先判斷自己這幾天常用的書籍和工具，一個禮拜把不常用的書籍放置到書架，把很久沒看的書移到箱子中。","tags":[]},{"title":"Shell 學習","date":"2017-03-11T17:50:29.000Z","path":"2017/03/11/Shell-學習/","text":"就是學習 Shell 的一篇文章。 1. 為何學習和 Shell 基礎簡單來說就是想偷賴。 Shell 是指令碼語言，由解譯器讀取程式碼並且執行其中的敘述。當初 Bourne Shell 用於管理工作的自動化。 bill Joy 開發 C Shell ，但速度慢；之後又出現了許多 Shell 。 Shell 又稱命令直譯器，目前大都使用 Brian Fox 撰寫的 bash 。下面是一個 shell 程式。 ex1-1.shview raw12345678# 顯示當下目錄的 json for filename in `ls .` # `ls .` 要用鍵整左上 esc 下的 `do if echo \"$filename\" | grep \"json\" then echo \"$filename\" fidone 寫成指令稿比較方便使用（需要改成可執行）。 常用參數： 參數 說明 $n 第 n 個參數 $0 當前指令稿（這是目前執行程式） $# 命令列參數個數（目前沒用過） $* 傳回所有參數的值（目前沒用過）[一串] $@ 同上[一個一個] $_ 上一個執行的指令後的參數（很有用） ps： 其他參數（特別的）需要括號（單、雙引號）。 沒有 $10 （應該說 $10 會取到 $1的值，之後會加上一個 0 字串，所以正確寫法要寫成 ${10} ） 下面的指令稿為 $# 和 $@ 的例子： ex1-1.shview raw1234#! /bin/bashecho \"$# parameters\"echo \"$@\" 執行 `./ex1-3.sh a “b c”，結果為： 122 parametersa b c 介紹 ls -l 指令後的 -l 判斷： ex1-1.shview raw123456789101112131415161718192021222324#! /bin/bashecho \"OPTIND starts at $OPTIND\"while getopts \":pq:\" optname do case \"$optname\" in \"p\" ) echo \"Option $optname is specified\" ;; \"q\" ) echo \"Option $optname has value $OPTARG\" ;; \"?\" ) echo \"Unknown option $OPTARG\" ;; \":\" ) echo \"No argument value for option $OPTARG\" ;; \"*\" ) echo \"Unknown error while processing options\" esac echo \"OPTIND is now $OPTIND\" done 上面這個指令搞不太了解 $OPTIND 為何不同，且而對於 while getopts &quot;:pq:&quot; optname ，雙引號中的意思不太清楚，書上有寫到： 第一個 : 忽略錯誤訊息 第二個代表選項需要一個值 ex1-1.shview raw1234#! /usr/bin/more# 輸出下面一整行echo \"Hello world!\" 介由指定解譯器，讓程式不僅僅限於 bash 。 變數在設定值時，不可以空隔，下面是範例： 12v1 = \"abc\" # 不正確的寫法v1=\"abc\" # ok! 在測試、判斷中等號兩邊一定會有空隔；而變數設定時就不會有空隔。 循環結構中有一個比較特別的叫 until 。 shell 中的 break 可以用 break 2 ，可以跳兩個迴圈 。 函數和指令稿有本質上的不同，指令稿系統會為其單獨建立處理程序；而函數不會。 函數的 return 回傳只能回傳 0~255 之間的 整數值。 間接參數傳遞： 12345var=namename=John$&#123;name&#125;$&#123;!var&#125; 有點像參照或指標。","tags":[{"name":"Shell","slug":"Shell","permalink":"https://hadesshark.github.io/tags/Shell/"}]},{"title":"關於學習","date":"2017-03-10T20:24:43.000Z","path":"2017/03/10/關於學習/","text":"對於最近的學習有些問題，在這一篇一一的寫下來。 1. 學習不集中每次定下目標，就會有擴散效果，最後就會目標失敗。今天看到一篇關於 side projects 的文章裡面有幾點值得學習的地方： 專案有時間性 專案越小越好 有用 不需要太大的功能，只要好用就可以，很多時候就是覺得學習目標太大或者時間很多（完全是錯覺），就會有不專心的情況。 所以學習要少量，不要定太大。 2. 對於有些東西就是不喜歡很簡單就是有排斥感，像是 PHP 、 Javascript 、 ASP.NET 和英文這些，還有就是某些 IDE ，其實也大概知道原因，就是不想改，遇到再說的心態，但又覺得不學很可惜，不斷的予盾心理，目前我的處理方式就是把自己弄忙，專注在當下的學習。 專注學習。 3. 結論簡單地實驗一個禮拜看看效果，再決定是否有要改進的地方。","tags":[]},{"title":"travis ci 使用心得","date":"2017-03-09T20:46:29.000Z","path":"2017/03/09/travis-ci-使用心得/","text":"簡單來說就是把 build 的動作交給 ci 來用，我只要好好打心得就可以了，目前在 mac 上測試成功，而且也順利把 hexo themes 主題上到 github 上了開心！！","tags":[{"name":"hexo","slug":"hexo","permalink":"https://hadesshark.github.io/tags/hexo/"},{"name":"travis ci","slug":"travis-ci","permalink":"https://hadesshark.github.io/tags/travis-ci/"}]},{"title":"今天遇到的一些問題","date":"2017-03-08T16:39:27.000Z","path":"2017/03/08/今天遇到的一些問題/","text":"今天在用 win7 電腦寫 hexo 時發現 themes 因為 git 的關係都沒有 push 到 github 上，就想說如何處理這個問題，早上遇到以下問題： 想用 ssh 連到 mac ，遇到問題 在 win 上面因為 themes/yilia 資料夾的問題 raspberry pi3 上的問題 說一下今天遇到的問題細節： 1. 在 win 上面想寫 blog想說昨天在 win 上面可以寫 hexo ，所以想把 github pull 下來，但是 themes 內沒有 yilia 主題，下載了主題卻想到裡面的 _config.yml 還要重寫所以就把 mac ssh 功能打開，沒想到又遇到問題… 覺得每次都要開 mac 感覺就是不對，所以就打開 raspberry pi 來使用，在中午前我想說透過 Dropbox 來存 _config.yml 所以很高興的存完後，才想到 rpi 要如個下載呢？在網路上找到了 dropbox uploader 但是設定時出了問題，把連線帳號寫錯，還好在下午二點多找到了設定檔在根目錄下 ~ ，但是麻煩的問題又出現了… 2. raspberry pi 的困境在 r-pi 上 發現 node.js 和 npm 都有問題，而且網路上的方法試過後 hexo 還是沒辦法使用（找 node.js 和 npm 安裝超花時間），這時候真的蠻灰心的，中間還想用 docker 但 run 的時候也發生問題，最後還是回到 win 上。 3. win 和 mac 編輯問題最後使用 ssh 連 mac 編輯文章時（就是這一篇）發現到文字會亂碼！！還好只是小問題，輕鬆解決。 4. 結論其實這一篇打到後面，才發現到解決方法很簡單只要在 win 上把 git 的資料載下來，安裝好主題把 dropbox 的資料放好就可以了，根本不需在 r-pi 花費那麼多時間，而且也發現到這個主題雖然好看但有許多小問題，有空還是自己寫一個框架比較好。","tags":[{"name":"hexo","slug":"hexo","permalink":"https://hadesshark.github.io/tags/hexo/"}]},{"title":"hexo-admin要小心使用","date":"2017-03-07T15:05:57.000Z","path":"2017/03/07/hexo-admin要小心使用/","text":"一個不小心就把之前寫的 next 安裝心得給刪了Q_Q。 剛才發現 hexo-admin 外掛只是把文件移到其它地方，還好有再檢查。","tags":[{"name":"hexo","slug":"hexo","permalink":"https://hadesshark.github.io/tags/hexo/"}]},{"title":"Next主題設置","date":"2017-03-07T10:17:52.000Z","path":"2017/03/07/next主題設置/","text":"主要就是根目錄下的_config.yml和 next 目錄下的/test/_config.yml的設定。 下面是 code ： _config.ymlview raw12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: 網頁標題subtitle:description:author: 自己的名字language: zh-twtimezone:# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: 自己網站的 urlroot: /permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tags # 要自己加archive_dir: archives # 要自己加category_dir: categories # 要自己加code_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace:# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# author imageavatar: 自己的圖片 url# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type:social: GitHub: 自己的 github url","tags":[{"name":"hexo","slug":"hexo","permalink":"https://hadesshark.github.io/tags/hexo/"}]},{"title":"第一個hexo文章","date":"2017-03-06T21:57:15.000Z","path":"2017/03/06/第一個hexo文章/","text":"主要目的是為了能夠在上傳到 github page ，聽說 hexo 不錯用，但是要安裝 node.js ，之後安裝 hexo 指令如下： 1234$ npm install hexo-cli -g$ hexo init blog$ cd blog$ hexo server 這樣 hexo 就起動了。","tags":[{"name":"hexo","slug":"hexo","permalink":"https://hadesshark.github.io/tags/hexo/"},{"name":"node.js","slug":"node-js","permalink":"https://hadesshark.github.io/tags/node-js/"}]}]